{"version":3,"file":"js/507.76c8e806.js","mappings":"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","sources":["webpack://gutar/[name]/webpack/universalModuleDefinition","webpack://gutar/[name]/webpack/bootstrap","webpack://gutar/[name]/src/transform/transform.ts","webpack://gutar/[name]/src/index.ts","webpack://gutar/[name]/src/download/download.ts","webpack://gutar/[name]/src/player/player.ts","webpack://gutar/[name]/src/exception/exception.ts","webpack://gutar/[name]/src/recorder/recorder.ts","webpack://gutar/./node_modules/js-audio-recorder/index.js","webpack://gutar/./src/page/mic/index.vue","webpack://gutar/./src/page/mic/index.vue?709c","webpack://gutar/./node_modules/core-js/internals/validate-arguments-length.js","webpack://gutar/./node_modules/core-js/modules/web.url-search-params.delete.js","webpack://gutar/./node_modules/core-js/modules/web.url-search-params.has.js","webpack://gutar/./node_modules/core-js/modules/web.url-search-params.size.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (let i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/**\r\n * 数据合并压缩\r\n * 根据输入和输出的采样率压缩数据，\r\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n * 所以输入数据中每隔3取1位\r\n *\r\n * @param {float32array} data       [-1, 1]的pcm数据\r\n * @param {number} inputSampleRate  输入采样率\r\n * @param {number} outputSampleRate 输出采样率\r\n * @returns  {float32array}         压缩处理后的二进制数据\r\n */\r\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n    // 压缩，根据采样率进行压缩\r\n    let rate = inputSampleRate / outputSampleRate,\r\n        compression = Math.max(rate, 1),\r\n        lData = data.left,\r\n        rData = data.right,\r\n        length = Math.floor(( lData.length + rData.length ) / rate),\r\n        result = new Float32Array(length),\r\n        index = 0,\r\n        j = 0;\r\n\r\n    // 循环间隔 compression 位取一位数据\r\n    while (index < length) {\r\n        // 取整是因为存在比例compression不是整数的情况\r\n        let temp = Math.floor(j);\r\n\r\n        result[index] = lData[temp];\r\n        index++;\r\n\r\n        if (rData.length) {\r\n            /*\r\n            * 双声道处理\r\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n            */\r\n            result[index] = rData[temp];\r\n            index++;\r\n        }\r\n\r\n        j += compression;\r\n    }\r\n    // 返回压缩后的一维数据\r\n    return result;\r\n}\r\n\r\n/**\r\n * 转换到我们需要的对应格式的编码\r\n *\r\n * @param {float32array} bytes      pcm二进制数据\r\n * @param {number}  sampleBits      采样位数\r\n * @param {boolean} littleEdian     是否是小端字节序\r\n * @returns {dataview}              pcm二进制数据\r\n */\r\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\r\n    let offset = 0,\r\n        dataLength = bytes.length * (sampleBits / 8),\r\n        buffer = new ArrayBuffer(dataLength),\r\n        data = new DataView(buffer);\r\n\r\n    // 写入采样数据\r\n    if (sampleBits === 8) {\r\n        for (let i = 0; i < bytes.length; i++, offset++) {\r\n            // 范围[-1, 1]\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\r\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n            let val = s < 0 ? s * 128 : s * 127;\r\n            val = +val + 128;\r\n            data.setInt8(offset, val);\r\n        }\r\n    } else {\r\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n * 所以，此处只需要在pcm数据前增加下就行了。\r\n *\r\n * @param {DataView} bytes           pcm二进制数据\r\n * @param {number}  inputSampleRate  输入采样率\r\n * @param {number}  outputSampleRate 输出采样率\r\n * @param {number}  numChannels      声道数\r\n * @param {number}  oututSampleBits  输出采样位数\r\n * @param {boolean} littleEdian      是否是小端字节序\r\n * @returns {DataView}               wav二进制数据\r\n */\r\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\r\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\r\n        sampleBits = oututSampleBits,\r\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n        data = new DataView(buffer),\r\n        channelCount = numChannels, // 声道\r\n        offset = 0;\r\n\r\n    // 资源交换文件标识符\r\n    writeString(data, offset, 'RIFF'); offset += 4;\r\n    // 下个地址开始到文件尾总字节数,即文件大小-8\r\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\r\n    // WAV文件标志\r\n    writeString(data, offset, 'WAVE'); offset += 4;\r\n    // 波形格式标志\r\n    writeString(data, offset, 'fmt '); offset += 4;\r\n    // 过滤字节,一般为 0x10 = 16\r\n    data.setUint32(offset, 16, littleEdian); offset += 4;\r\n    // 格式类别 (PCM形式采样数据)\r\n    data.setUint16(offset, 1, littleEdian); offset += 2;\r\n    // 声道数\r\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\r\n    // 采样率,每秒样本数,表示每个通道的播放速度\r\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\r\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\r\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\r\n    // 采样位数\r\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\r\n    // 数据标识符\r\n    writeString(data, offset, 'data'); offset += 4;\r\n    // 采样数据总数,即数据总大小-44\r\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\r\n\r\n    // 给wav头增加pcm体\r\n    for (let i = 0; i < bytes.byteLength;) {\r\n        data.setUint8(offset, bytes.getUint8(i));\r\n        offset++;\r\n        i++;\r\n    }\r\n\r\n    return data;\r\n}\r\n","import { downloadPCM, downloadWAV, download } from './download/download';\r\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\r\nimport Player from './player/player';\r\nimport Recorder from './recorder/recorder';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nclass Index extends Recorder {\r\n    private isrecording: boolean = false;       // 是否正在录音\r\n    private ispause: boolean = false;           // 是否是暂停\r\n    private isplaying: boolean = false;         // 是否正在播放\r\n\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * 重新修改配置\r\n     *\r\n     * @param {recorderConfig} [options={}]\r\n     * @memberof Recorder\r\n     */\r\n    public setOption(options: recorderConfig = {}) {\r\n        this.setNewOption(options);\r\n    }\r\n\r\n    /**\r\n     * Start the recording\r\n     */\r\n    start(): Promise<{}> {\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return Promise.reject();\r\n        }\r\n\r\n        this.isrecording = true;\r\n\r\n        return this.startRecord();\r\n    }\r\n\r\n    /**\r\n     * Pause the recording\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // 当前不暂停的时候才可以暂停\r\n            this.pauseRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            this.resumeRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        if (this.isrecording) {\r\n            this.isrecording = false;\r\n            this.ispause = false;\r\n            this.stopRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放录音\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.isplaying = true;\r\n\r\n        this.onplay && this.onplay();\r\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\r\n\r\n        const dataV = this.getWAV();\r\n\r\n        if (dataV.byteLength > 44) {\r\n            Player.play(dataV.buffer);  // 播放\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取已经播放了多长时间\r\n     */\r\n    getPlayTime(): number {\r\n        return Player.getPlayTime();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pausePlay(): void {\r\n        if (this.isrecording || !this.isplaying) {\r\n            // 正在录音或没有播放，暂停无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onpauseplay && this.onpauseplay();\r\n        Player.pausePlay();\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumePlay(): void {\r\n        if (this.isrecording || this.isplaying) {\r\n            // 正在录音或已经播放或没开始播放，恢复无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = true;\r\n        this.onresumeplay && this.onresumeplay();\r\n        Player.resumePlay();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stopPlay(): void {\r\n        if (this.isrecording) {\r\n            // 正在录音，停止录音播放无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onstopplay && this.onstopplay();\r\n        Player.stopPlay();\r\n    }\r\n\r\n    destroy(): Promise<{}> {\r\n        Player.destroyPlay();\r\n\r\n        return this.destroyRecord();\r\n    }\r\n\r\n    /**\r\n     * 获取当前已经录音的PCM音频数据\r\n     *\r\n     * @returns[DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getWholeData() {\r\n    //     return this.tempPCM;\r\n    // }\r\n\r\n    /**\r\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\r\n     *\r\n     * @returns [DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getNextData() {\r\n    //     let length = this.tempPCM.length,\r\n    //         data = this.tempPCM.slice(this.offset);\r\n\r\n    //     this.offset = length;\r\n\r\n    //     return data;\r\n    // }\r\n\r\n    /**\r\n     * 获取当前录音的波形数据，\r\n     * 调取频率由外部控制。\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData(): any {\r\n        return this.getAnalyseData();\r\n    }\r\n\r\n    /**\r\n     * 获取录音播放时的波形数据，\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData(): any {\r\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\r\n        return Player.getAnalyseData();\r\n    }\r\n\r\n    getPCM(): any {\r\n        // 先停止\r\n        this.stop();\r\n        // 获取pcm数据\r\n        let data: any = this.getData();\r\n        // 根据输入输出比例 压缩或扩展\r\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob(): any {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        let pcmBlob = this.getPCMBlob();\r\n\r\n        downloadPCM(pcmBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAV(): any {\r\n        let pcmTemp = this.getPCM();\r\n\r\n        // PCM增加44字节的头就是WAV格式了\r\n        return encodeWAV(pcmTemp, this.inputSampleRate,\r\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\r\n    }\r\n\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob(): any {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        let wavBlob = this.getWAVBlob();\r\n\r\n        downloadWAV(wavBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 通用的下载接口\r\n     */\r\n    download(blob, name: string, type: string): void {\r\n        download(blob, name, type);\r\n    }\r\n\r\n    /**\r\n     * 获取左和右声道的数据\r\n     *\r\n     * @returns [DataView]\r\n     */\r\n    getChannelData(): any {\r\n        const all = this.getPCM();\r\n        const length = all.byteLength;\r\n        const littleEdian = this.littleEdian\r\n        const res = { left: null, right: null }\r\n\r\n        if (this.config.numChannels === 2) {\r\n            // 双通道,劈开\r\n            const lD = new DataView(new ArrayBuffer(length / 2))\r\n            const rD = new DataView(new ArrayBuffer(length / 2))\r\n            // 双声道，需要拆分下数据\r\n\r\n            if (this.config.sampleBits === 16) {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\r\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\r\n                }\r\n            } else {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt8(i, all.getInt8(i * 2))\r\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\r\n                }\r\n            }\r\n\r\n            res.left = lD\r\n            res.right = rD\r\n        } else {\r\n            // 单通道\r\n            res.left = all\r\n        }\r\n\r\n        return res\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","/**\r\n * 下载录音文件\r\n * @private\r\n * @param {*} blob      blob数据\r\n * @param {string} name 下载的文件名\r\n * @param {string} type 下载的文件后缀\r\n */\r\nfunction _download(blob, name: string, type: string): void {\r\n    let oA = document.createElement('a');\r\n\r\n    oA.href = window.URL.createObjectURL(blob);\r\n    oA.download = `${ name }.${ type }`;\r\n    oA.click();\r\n}\r\n\r\n/**\r\n * 下载录音的wav数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n */\r\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\r\n    _download(wavblob, name, 'wav');\r\n}\r\n\r\n/**\r\n * 下载录音pcm数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n * @memberof Recorder\r\n */\r\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\r\n    _download(pcmBlob, name, 'pcm');\r\n}\r\n\r\n// 通用下载接口\r\nexport function download(blob, name: string, type: string) {\r\n    return _download(blob, name, type)\r\n}\r\n","import { throwError } from '../exception/exception'\r\n\r\ndeclare let window: any;\r\n\r\nlet source: any = null;\r\nlet playTime: number = 0;       // 相对时间，记录暂停位置\r\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\r\nlet context: any = null;\r\nlet analyser: any = null;\r\n\r\nlet audioData: any = null;\r\n// let hasInit: boolean = false;           // 是否已经初始化了\r\nlet isPaused: boolean = false;\r\nlet totalTime: number = 0;\r\nlet endplayFn: any = function() {};\r\n\r\n/**\r\n * 初始化\r\n */\r\nfunction init(): void {\r\n    context = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = context.createAnalyser();\r\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n}\r\n\r\n/**\r\n * play\r\n * @returns {Promise<{}>}\r\n */\r\nfunction playAudio(): Promise<{}> {\r\n    isPaused = false;\r\n\r\n    return context.decodeAudioData(audioData.slice(0), buffer => {\r\n        source = context.createBufferSource();\r\n\r\n        // 播放结束的事件绑定\r\n        source.onended = () => {\r\n            if (!isPaused) {  // 暂停的时候也会触发该事件\r\n                // 计算音频总时长\r\n                totalTime = context.currentTime - playStamp + playTime;\r\n                endplayFn();\r\n            }\r\n\r\n        }\r\n\r\n        // 设置数据\r\n        source.buffer = buffer;\r\n        // connect到分析器，还是用录音的，因为播放时不能录音的\r\n        source.connect(analyser);\r\n        analyser.connect(context.destination);\r\n        source.start(0, playTime);\r\n\r\n        // 记录当前的时间戳，以备暂停时使用\r\n        playStamp = context.currentTime;\r\n    }, function(e) {\r\n        throwError(e);\r\n    });\r\n}\r\n\r\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\r\nfunction destroySource() {\r\n    if (source) {\r\n        source.stop();\r\n        source = null;\r\n    }\r\n}\r\n\r\nexport default class Player {\r\n    /**\r\n     * play record\r\n     * @static\r\n     * @param {ArrayBuffer} arraybuffer\r\n     * @memberof Player\r\n     */\r\n    static play(arraybuffer): Promise<{}> {\r\n        if (!context) {\r\n            // 第一次播放要初始化\r\n            init();\r\n        }\r\n        this.stopPlay();\r\n        // 缓存播放数据\r\n        audioData = arraybuffer;\r\n        totalTime = 0;\r\n\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     * @memberof Player\r\n     */\r\n    static pausePlay(): void {\r\n        destroySource();\r\n        // 多次暂停需要累加\r\n        playTime += context.currentTime - playStamp;\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     * @memberof Player\r\n     */\r\n    static resumePlay(): Promise<{}> {\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     * @memberof Player\r\n     */\r\n    static stopPlay() {\r\n        playTime = 0;\r\n        audioData = null;\r\n\r\n        destroySource();\r\n    }\r\n\r\n    static destroyPlay() {\r\n        this.stopPlay();\r\n    }\r\n\r\n    static getAnalyseData() {\r\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     * 增加录音播放完成的事件绑定\r\n     *\r\n     * @static\r\n     * @param {*} [fn=function() {}]\r\n     * @memberof Player\r\n     */\r\n    static addPlayEnd(fn: any = function() {}) {\r\n        endplayFn = fn;\r\n    }\r\n\r\n    // 获取已经播放的时长\r\n    static getPlayTime(): number {\r\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\r\n\r\n        return totalTime || pTime;\r\n    }\r\n}\r\n","/**\r\n * 异常处理\r\n * @static\r\n * @param {*} message   错误消息\r\n */\r\nexport function throwError(message: string) {\r\n    throw new Error(message);\r\n}\r\n","import { compress, encodePCM, encodeWAV } from '../transform/transform';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nexport default class Recorder {\r\n    private context: any;\r\n    protected config: recorderConfig;               // 配置\r\n    private analyser: any;\r\n    private size: number = 0;                       // 录音文件总长度\r\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\r\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\r\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\r\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\r\n    private audioInput: any;\r\n    protected inputSampleRate: number;              // 输入采样率\r\n    protected inputSampleBits: number = 16;         // 输入采样位数\r\n    protected outputSampleRate: number;             // 输出采样率\r\n    protected oututSampleBits: number;              // 输出采样位数\r\n    private source: any;                            // 音频输入\r\n    private recorder: any;\r\n    private stream: any;                            // 流\r\n    protected littleEdian: boolean;                 // 是否是小端字节序\r\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\r\n    protected duration: number = 0;                 // 录音时长\r\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\r\n    // 正在录音时间，参数是已经录了多少时间了\r\n    public onprocess: (duration: number) => void;\r\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\r\n    public onprogress: (payload: {\r\n        duration: number,\r\n        fileSize: number,\r\n        vol: number,\r\n        // data: Array<DataView>,      // 当前存储的所有录音数据\r\n    }) => void;\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // 临时audioContext，为了获取输入采样率的\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\r\n\r\n        // 设置输出配置\r\n        this.setNewOption(options);\r\n\r\n        // 判断端字节序\r\n        this.littleEdian = (function() {\r\n            let buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            return new Int16Array(buffer)[0] === 256;\r\n        })();\r\n        // 兼容 getUserMedia\r\n        Recorder.initUserMedia();\r\n    }\r\n\r\n    protected setNewOption(options: recorderConfig = {}) {\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n            // 是否需要边录边转，默认关闭，后期使用web worker\r\n            // compiling: !!options.compiling || false,   // 先移除\r\n        };\r\n        // 设置采样的参数\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {Promise<{}>}\r\n     * @memberof Recorder\r\n     */\r\n    startRecord(): Promise<{}> {\r\n        if (this.context) {\r\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\r\n            this.destroyRecord();\r\n        }\r\n        // 初始化\r\n        this.initRecorder();\r\n\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n            this.stream = stream;\r\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\r\n            , error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        } */).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // this.audioInput.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pauseRecord(): void {\r\n        this.needRecord = false;\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumeRecord(): void {\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     */\r\n    stopRecord(): void {\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.source && this.source.stop();\r\n        this.recorder.disconnect();\r\n        this.analyser.disconnect();\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 销毁录音对象\r\n     *\r\n     */\r\n    destroyRecord(): Promise<{}> {\r\n        this.clearRecordStatus();\r\n        // 结束流\r\n        this.stopStream();\r\n\r\n        return this.closeAudioContext();\r\n    }\r\n\r\n    getAnalyseData() {\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    // 获取录音数据\r\n    getData() {\r\n        let data: any = this.flat();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 清除状态\r\n     *\r\n     */\r\n    private clearRecordStatus() {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n    }\r\n\r\n    /**\r\n     * 将二维数组转一维\r\n     *\r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        let lData = null,\r\n            rData = new Float32Array(0);    // 右声道默认为0\r\n\r\n        // 创建存放数据的容器\r\n        if (1 === this.config.numChannels) {\r\n            lData = new Float32Array(this.size);\r\n        } else {\r\n            lData = new Float32Array(this.size / 2);\r\n            rData = new Float32Array(this.size / 2);\r\n        }\r\n        // 合并\r\n        let offset = 0; // 偏移量计算\r\n\r\n        // 将二维数据，转成一维数据\r\n        // 左声道\r\n        for (let i = 0; i < this.lBuffer.length; i++) {\r\n            lData.set(this.lBuffer[i], offset);\r\n            offset += this.lBuffer[i].length;\r\n        }\r\n\r\n        offset = 0;\r\n        // 右声道\r\n        for (let i = 0; i < this.rBuffer.length; i++) {\r\n            rData.set(this.rBuffer[i], offset);\r\n            offset += this.rBuffer[i].length;\r\n        }\r\n\r\n        return {\r\n            left: lData,\r\n            right: rData\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化录音实例\r\n     */\r\n    private initRecorder(): void {\r\n        // 清空数据\r\n        this.clearRecordStatus();\r\n\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\r\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            if (!this.needRecord) {\r\n                return;\r\n            }\r\n            // 左声道数据\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            let lData = e.inputBuffer.getChannelData(0),\r\n                rData = null,\r\n                vol = 0;        // 音量百分比\r\n\r\n            this.lBuffer.push(new Float32Array(lData));\r\n\r\n            this.size += lData.length;\r\n\r\n            // 判断是否有右声道数据\r\n            if (2 === this.config.numChannels) {\r\n                rData = e.inputBuffer.getChannelData(1);\r\n                this.rBuffer.push(new Float32Array(rData));\r\n\r\n                this.size += rData.length;\r\n            }\r\n\r\n            // 边录边转处理 暂时不支持\r\n            // if (this.config.compiling) {\r\n            //     let pcm = this.transformIntoPCM(lData, rData);\r\n\r\n            //     this.tempPCM.push(pcm);\r\n            //     // 计算录音大小\r\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\r\n            // } else {\r\n                // 计算录音大小\r\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\r\n                    * (this.oututSampleBits / 8)\r\n            // }\r\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\r\n            // 有小数位的偏差。\r\n\r\n            // 计算音量百分比\r\n            vol = Math.max.apply(Math, lData) * 100;\r\n            // 统计录音时长\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // 录音时长回调\r\n            this.onprocess && this.onprocess(this.duration);\r\n            // 录音时长及响度回调\r\n            this.onprogress && this.onprogress({\r\n                duration: this.duration,\r\n                fileSize: this.fileSize,\r\n                vol,\r\n                // data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private stopStream() {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close兼容方案\r\n     * 如firefox 30 等低版本浏览器没有 close方法\r\n     */\r\n    private closeAudioContext() {\r\n        if (this.context && this.context.close && this.context.state !== 'closed') {\r\n            return this.context.close();\r\n        } else {\r\n            return new Promise((resolve) => {\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n    // getUserMedia 版本兼容\r\n    static initUserMedia() {\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\r\n                }\r\n\r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将获取到到左右声道的Float32Array数据编码转化\r\n     *\r\n     * @param {Float32Array} lData  左声道数据\r\n     * @param {Float32Array} rData  有声道数据\r\n     * @returns DataView\r\n     */\r\n    private transformIntoPCM(lData, rData) {\r\n        let lBuffer = new Float32Array(lData),\r\n            rBuffer = new Float32Array(rData);\r\n\r\n        let data = compress({\r\n            left: lBuffer,\r\n            right: rBuffer,\r\n        }, this.inputSampleRate, this.outputSampleRate);\r\n\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    static getPermission(): Promise<{}> {\r\n        this.initUserMedia();\r\n\r\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\r\n            stream && stream.getTracks().forEach(track => track.stop());\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"./dist/recorder.js\");\r\n","<template>\r\n  <div>\r\n    <div>\r\n      <canvas style=\"width: 400px;height: 200px\" ref=\"canvasRef\"></canvas>\r\n    </div>\r\n    <div class=\"note-line\">\r\n      <span>历史高强度音:</span>\r\n      <span v-for=\"noteKey in state.strongNoteHistory\">{{ noteKey }}、</span>\r\n    </div>\r\n    <div class=\"note-line\">\r\n      <span>已识别音:</span>\r\n      <span v-for=\"(data,noteKey) in state.highFrequencyNoteMap\">{{ noteKey }}、</span>\r\n    </div>\r\n    <div class=\"note-line\">\r\n      <span>持续音（>=0.1s）:</span>\r\n      <span v-for=\"(data,noteKey) in state.highFrequencyNoteMap\">\r\n        <template v-if=\"data.continueTime >= 100\">{{ noteKey }}、</template>\r\n      </span>\r\n    </div>\r\n    <div>\r\n      <button @click=\"testMic\">测试麦克风</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script setup>\r\n\r\nimport {reactive, ref} from \"vue\";\r\nimport Recorder from 'js-audio-recorder'\r\nimport {noteMap} from \"@/page/sound/sound.config\";\r\n\r\nconst state = reactive({\r\n  animationEnable: true,\r\n  highFrequencyNoteMap: {},\r\n  strongNoteHistory: []\r\n})\r\n\r\n\r\nconst canvasRef = ref();\r\n\r\nlet recorder = undefined;\r\n\r\nconst testMic = () => {\r\n  if (recorder && state.animationEnable) {\r\n    // 暂停录音\r\n    recorder.pause();\r\n    state.animationEnable = false;\r\n  } else if (recorder && !state.animationEnable) {\r\n    // 继续录音\r\n    recorder.resume()\r\n    state.animationEnable = true;\r\n  }\r\n  if (recorder === undefined) {\r\n    recorder = new Recorder({\r\n      sampleBits: 8,         // 采样位数，支持 8 或 16，默认是16\r\n      sampleRate: 16000,      // 采样率，支持 11025、16000、22050、24000、44100、48000，根据浏览器默认值，我的chrome是48000\r\n      numChannels: 1,         // 声道，支持 1 或 2， 默认是1\r\n    });\r\n    const canvasCtx = canvasRef.value.getContext(\"2d\");\r\n    recorder.start().then(function () {\r\n      let printOnce = 1;\r\n\r\n      function draw() {\r\n        let dataArray = new Uint8Array(recorder.analyser.frequencyBinCount);\r\n        recorder.analyser.getByteFrequencyData(dataArray)\r\n        const WIDTH = canvasRef.value.width\r\n        const HEIGHT = canvasRef.value.height;\r\n        requestAnimationFrame(draw);\r\n        if (!state.animationEnable) {\r\n          return;\r\n        }\r\n        printOnce += 1;\r\n        if (printOnce === 100) {\r\n          console.log(dataArray);\r\n        }\r\n        canvasCtx.fillStyle = 'rgb(232,232,232)'\r\n        canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\r\n        canvasCtx.lineWidth = 2;\r\n        canvasCtx.strokeStyle = 'rgb(149,209,255)';\r\n        canvasCtx.beginPath();\r\n        let sliceWidth = WIDTH * 1.0 / dataArray.length;\r\n        let x = 0;\r\n        let maxData = 0;\r\n        let bigIndex = [];\r\n        const nowTime = new Date().getTime();\r\n        for (let i = 0; i < dataArray.length; i++) {\r\n          const visualData = dataArray[i];\r\n          const frequency = (i + 1) * 20000 / 1024;\r\n          const noteKey = getNoteKeyByFrequency(frequency);\r\n          const recordNote = state.highFrequencyNoteMap[noteKey];\r\n          if (visualData > 128\r\n              || (visualData > 64 && recordNote !== undefined)\r\n              || (visualData > 10 && recordNote !== undefined && nowTime - recordNote.beginTime < 1000)) {\r\n            bigIndex.push(i);\r\n          }\r\n          if (visualData > maxData) {\r\n            maxData = visualData;\r\n          }\r\n          let strong = visualData / 256;\r\n          let y = HEIGHT - strong * HEIGHT;\r\n          canvasCtx.moveTo(x, HEIGHT);\r\n          canvasCtx.lineTo(x, y);\r\n          x += sliceWidth;\r\n        }\r\n        canvasCtx.stroke();\r\n        canvasCtx.beginPath();\r\n        //强频率\r\n        canvasCtx.strokeStyle = 'rgb(22,141,255)';\r\n        let highFrequencyNoteMap = {};\r\n        let strongNoteHistory = [];\r\n        for (let j = 0; j < bigIndex.length; j++) {\r\n          const index = bigIndex[j];\r\n          const strong = dataArray[index] / 256;\r\n          const y = HEIGHT - HEIGHT * strong;\r\n          canvasCtx.moveTo(sliceWidth * index, HEIGHT);\r\n          canvasCtx.lineTo(sliceWidth * index, y);\r\n          //处理强频率\r\n          const frequency = (index + 1) * 20000 / 1024;\r\n          const noteKey = getNoteKeyByFrequency(frequency);\r\n          if (noteKey !== undefined && highFrequencyNoteMap[noteKey] === undefined) {\r\n            highFrequencyNoteMap[noteKey] = {\r\n              beginTime: nowTime,\r\n              maxStrong: strong,\r\n              continueTime: 0\r\n            }\r\n            if (strong > 0.9) {\r\n              strongNoteHistory.push(noteKey);\r\n            }\r\n          }\r\n        }\r\n        if (strongNoteHistory.length > 0) {\r\n          state.strongNoteHistory = strongNoteHistory;\r\n        }\r\n        canvasCtx.stroke();\r\n        //合并上一帧识别结果\r\n        for (const noteKey in highFrequencyNoteMap) {\r\n          const oldData = state.highFrequencyNoteMap[noteKey];\r\n          let newData = highFrequencyNoteMap[noteKey];\r\n          if (oldData !== undefined) {\r\n            newData.beginTime = oldData.beginTime;\r\n            newData.maxStrong = oldData.maxStrong;\r\n            newData.continueTime = nowTime - oldData.beginTime;\r\n          }\r\n        }\r\n        state.highFrequencyNoteMap = highFrequencyNoteMap;\r\n      }\r\n\r\n      draw();\r\n    });\r\n  }\r\n}\r\n\r\nconst getNoteKeyByFrequency = (f) => {\r\n  let key = undefined;\r\n  for (let i = 0; i < noteMap.length - 1; i++) {\r\n    const f1 = f - noteMap[i].f;\r\n    const f2 = f - noteMap[i + 1].f;\r\n    if (f1 >= 0 && f2 <= 0) {\r\n      key = f1 + f2 < 0 ? noteMap[i].k : noteMap[i + 1].k;\r\n      break;\r\n    }\r\n  }\r\n  return key;\r\n}\r\n\r\n\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.note-line {\r\n  word-break: keep-all;\r\n}\r\n</style>\r\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=1855e9eb&lang=less&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1855e9eb\"]])\n\nexport default __exports__","'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw new $TypeError('Not enough arguments');\n  return passed;\n};\n","'use strict';\nvar defineBuiltIn = require('../internals/define-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar $URLSearchParams = URLSearchParams;\nvar URLSearchParamsPrototype = $URLSearchParams.prototype;\nvar append = uncurryThis(URLSearchParamsPrototype.append);\nvar $delete = uncurryThis(URLSearchParamsPrototype['delete']);\nvar forEach = uncurryThis(URLSearchParamsPrototype.forEach);\nvar push = uncurryThis([].push);\nvar params = new $URLSearchParams('a=1&a=2&b=3');\n\nparams['delete']('a', 1);\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nparams['delete']('b', undefined);\n\nif (params + '' !== 'a=2') {\n  defineBuiltIn(URLSearchParamsPrototype, 'delete', function (name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $delete(this, name);\n    var entries = [];\n    forEach(this, function (v, k) { // also validates `this`\n      push(entries, { key: k, value: v });\n    });\n    validateArgumentsLength(length, 1);\n    var key = toString(name);\n    var value = toString($value);\n    var index = 0;\n    var dindex = 0;\n    var found = false;\n    var entriesLength = entries.length;\n    var entry;\n    while (index < entriesLength) {\n      entry = entries[index++];\n      if (found || entry.key === key) {\n        found = true;\n        $delete(this, entry.key);\n      } else dindex++;\n    }\n    while (dindex < entriesLength) {\n      entry = entries[dindex++];\n      if (!(entry.key === key && entry.value === value)) append(this, entry.key, entry.value);\n    }\n  }, { enumerable: true, unsafe: true });\n}\n","'use strict';\nvar defineBuiltIn = require('../internals/define-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar $URLSearchParams = URLSearchParams;\nvar URLSearchParamsPrototype = $URLSearchParams.prototype;\nvar getAll = uncurryThis(URLSearchParamsPrototype.getAll);\nvar $has = uncurryThis(URLSearchParamsPrototype.has);\nvar params = new $URLSearchParams('a=1');\n\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nif (params.has('a', 2) || !params.has('a', undefined)) {\n  defineBuiltIn(URLSearchParamsPrototype, 'has', function has(name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $has(this, name);\n    var values = getAll(this, name); // also validates `this`\n    validateArgumentsLength(length, 1);\n    var value = toString($value);\n    var index = 0;\n    while (index < values.length) {\n      if (values[index++] === value) return true;\n    } return false;\n  }, { enumerable: true, unsafe: true });\n}\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\n\nvar URLSearchParamsPrototype = URLSearchParams.prototype;\nvar forEach = uncurryThis(URLSearchParamsPrototype.forEach);\n\n// `URLSearchParams.prototype.size` getter\n// https://github.com/whatwg/url/pull/734\nif (DESCRIPTORS && !('size' in URLSearchParamsPrototype)) {\n  defineBuiltInAccessor(URLSearchParamsPrototype, 'size', {\n    get: function size() {\n      var count = 0;\n      forEach(this, function () { count++; });\n      return count;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n"],"names":["t","e","module","exports","n","i","o","l","call","m","c","d","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","length","setUint8","charCodeAt","compress","Math","max","left","a","right","floor","u","Float32Array","f","encodePCM","ArrayBuffer","DataView","min","setInt8","setInt16","encodeWAV","byteLength","setUint32","setUint16","getUint8","__extends","setPrototypeOf","__proto__","Array","constructor","isrecording","ispause","isplaying","setOption","this","setNewOption","start","Promise","reject","startRecord","pause","pauseRecord","resume","resumeRecord","stop","stopRecord","play","onplay","addPlayEnd","onplayend","getWAV","buffer","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroy","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","inputSampleRate","outputSampleRate","oututSampleBits","littleEdian","getPCMBlob","Blob","downloadPCM","config","numChannels","getWAVBlob","type","downloadWAV","download","getChannelData","sampleBits","getInt16","getInt8","document","createElement","href","window","URL","createObjectURL","click","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","throwError","h","y","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","getByteTimeDomainData","Error","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","duration","needRecord","sampleRate","Int16Array","initUserMedia","indexOf","context","initRecorder","navigator","mediaDevices","getUserMedia","audio","then","audioInput","createMediaStreamSource","stream","analyser","recorder","disconnect","source","clearRecordStatus","stopStream","closeAudioContext","flat","PCM","set","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","inputBuffer","push","onprocess","onprogress","vol","getTracks","forEach","close","state","webkitGetUserMedia","mozGetUserMedia","transformIntoPCM","getPermission","reactive","animationEnable","highFrequencyNoteMap","strongNoteHistory","canvasRef","ref","testMic","undefined","Recorder","canvasCtx","getContext","printOnce","draw","dataArray","getByteFrequencyData","WIDTH","width","HEIGHT","height","requestAnimationFrame","console","log","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","maxData","bigIndex","nowTime","Date","getTime","visualData","frequency","noteKey","getNoteKeyByFrequency","recordNote","beginTime","strong","moveTo","lineTo","stroke","j","index","maxStrong","continueTime","oldData","newData","key","noteMap","f1","f2","k","__exports__","$TypeError","TypeError","passed","required","defineBuiltIn","uncurryThis","toString","validateArgumentsLength","$URLSearchParams","URLSearchParams","URLSearchParamsPrototype","append","$delete","params","name","arguments","$value","entries","v","entry","dindex","found","entriesLength","unsafe","getAll","$has","has","values","DESCRIPTORS","defineBuiltInAccessor","count","configurable"],"sourceRoot":""}